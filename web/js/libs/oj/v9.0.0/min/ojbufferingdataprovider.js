/**
 * @license
 * Copyright (c) 2014, 2020, Oracle and/or its affiliates.
 * Licensed under The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
define(["ojs/ojcore","ojs/ojset","ojs/ojmap","ojs/ojdataprovider","ojs/ojcomponentcore","ojs/ojeventtarget"],function(t,e,a,i){"use strict";var s=t.GenericEvent;class r{constructor(t,a){this.dataProvider=t,this.options=a,this.AsyncIterable=class{constructor(t,e){this._parent=t,this._asyncIterator=e,this[Symbol.asyncIterator]=function(){return this._asyncIterator}}},this.AsyncIterator=class{constructor(t,a,i){this._parent=t,this._baseIterator=a,this._params=i,this.itemArray=[],this.firstBaseKey=null,this.mergedAddKeySet=new e,this.mergedMetadataArray=[],this.mergedDataArray=[]}_fetchNext(){return this._baseIterator.next().then(t=>{if(!this.firstBaseKey&&t.value.metadata.length&&(this.firstBaseKey=t.value.metadata[0].key),!this._parent.editBuffer.isEmpty()){let e=t.value.data.map((e,a)=>({data:t.value.data[a],metadata:t.value.metadata[a]})),a=this.itemArray.slice();this.itemArray=[],this._parent._mergeEdits(e,a,this._params.filterCriterion,this._params.sortCriteria,!0,this.mergedAddKeySet,t.done);const i=this._params||{};if((i.size&&a.length<i.size||null==i.size&&0===a.length)&&!t.done)return this.itemArray=a,this._fetchNext();i.size&&a.length>i.size&&(this.itemArray=a.splice(i.size));const s=t.done&&0===this.itemArray.length;let r=a.map(t=>t.data),n=a.map(t=>t.metadata);return{done:s,value:{fetchParameters:this._params,data:r,metadata:n}}}return t})}next(){return this._fetchNext().then(t=>{const e=t.value.metadata,a=t.value.data;for(let t=0;t<e.length;t++)this.mergedMetadataArray.push(e[t]),this.mergedDataArray.push(a[t]);return t})}},this._addEventListeners(t),this.editBuffer=new d,this.lastSubmittableCount=0,this.lastFetchListParams=null,this.lastIterator=null}_fetchByKeysFromBuffer(t){let i=new a,s=new e;return t.keys.forEach(t=>{const e=this.editBuffer.getItem(t);if(e)switch(e.operation){case"add":case"update":i.set(t,e.item)}else s.add(t)}),{results:i,unresolvedKeys:s}}_compareItem(t,e,a){for(let i=0;i<a.length;i++){if(t[a[i].attribute]>e[a[i].attribute])return"ascending"===a[i].direction?1:-1;if(t[a[i].attribute]<e[a[i].attribute])return"ascending"===a[i].direction?-1:1}return 0}_insertAddEdits(t,e,a,i,s,r){t.forEach((t,n)=>{if("add"===t.operation&&!s.has(n)&&(!e||e.filter(t.item.data)))if(a&&a.length){let e=!1;for(let r=0;r<i.length;r++)if(this._compareItem(t.item.data,i[r].data,a)<0){i.splice(r,0,t.item),s.add(n),e=!0;break}!e&&r&&(i.push(t.item),s.add(n))}else i.push(t.item),s.add(n)})}_mergeAddEdits(t,e,a,i,s){this._insertAddEdits(this.editBuffer.getUnsubmittedItems(),t,e,a,i,s),this._insertAddEdits(this.editBuffer.getSubmittingItems(),t,e,a,i,s)}_mergeEdits(t,e,a,s,r,n,d){let o;a&&(o=a.filter?a:i.FilterFactory.getFilter({filterDef:a,filterOptions:this.options})),!r||s&&s.length||this._mergeAddEdits(o,s,e,n,d);for(let a=0;a<t.length;a++){let i=t[a],s=this.editBuffer.getItem(i.metadata.key);s?"remove"===s.operation||"update"===s.operation&&(o&&!o.filter(s.item.data)||e.push(s.item)):e.push(i)}s&&s.length&&this._mergeAddEdits(o,s,e,n,d)}_fetchFromOffset(t,a){return this.dataProvider.fetchByOffset(t).then(i=>{if(!this.editBuffer.isEmpty()){const s=i.results;if(this._mergeEdits(s,a,t.filterCriterion,t.sortCriteria,0===t.offset,new e,i.done),(t.size&&a.length<t.size||null==t.size&&0===a.length)&&!i.done){const e={attributes:t.attributes,clientId:t.clientId,filterCriterion:t.filterCriterion,offset:t.offset+i.results.length,size:t.size,sortCriteria:t.sortCriteria};return this._fetchFromOffset(e,a)}return t.size&&a.length>t.size&&a.splice(t.size),{fetchParameters:t,results:a,done:i.done}}return i})}containsKeys(t){let a=this._fetchByKeysFromBuffer(t),i=a.unresolvedKeys,s=new e;return a.results.forEach((t,e)=>{s.add(e)}),0===i.size?Promise.resolve({containsParameters:t,results:s}):this.dataProvider.containsKeys({attributes:t.attributes,keys:i,scope:t.scope}).then(e=>s.size>0?(e.results.forEach((t,e)=>{s.add(e)}),{containsParameters:t,results:s}):e)}fetchByKeys(t){let e=this._fetchByKeysFromBuffer(t),a=e.unresolvedKeys,i=e.results;return 0===a.size?Promise.resolve({fetchParameters:t,results:i}):this.dataProvider.fetchByKeys({attributes:t.attributes,keys:a,scope:t.scope}).then(e=>i.size>0?(e.results.forEach((t,e)=>{i.set(e,t)}),{fetchParameters:t,results:i}):e)}fetchByOffset(t){return this._fetchFromOffset(t,[])}fetchFirst(t){this.lastFetchListParams=t;const e=this.dataProvider.fetchFirst(t)[Symbol.asyncIterator]();return this.lastIterator=new this.AsyncIterator(this,e,t),new this.AsyncIterable(this,this.lastIterator)}getCapability(t){return this.dataProvider.getCapability(t)}_calculateSizeChange(t){let e=0;return t.forEach((t,a)=>{"add"===t.operation?++e:"remove"===t.operation&&--e}),e}getTotalSize(){return this.dataProvider.getTotalSize().then(t=>(t>-1&&(t+=this._calculateSizeChange(this.editBuffer.getSubmittingItems()),t+=this._calculateSizeChange(this.editBuffer.getUnsubmittedItems())),t))}isEmpty(){const t=this.editBuffer.getUnsubmittedItems(),e=this.editBuffer.getSubmittingItems();t.forEach((t,e)=>{if("add"===t.operation||"update"===t.operation)return"no"}),e.forEach((t,e)=>{if("add"===t.operation||"update"===t.operation)return"no"});let a=this.dataProvider.isEmpty();return"no"===a&&(t.size>0||e.size>0)?"unknown":a}addItem(t){this.editBuffer.addItem(t);let a=null;if(this.lastIterator){const e=this.lastFetchListParams?this.lastFetchListParams.sortCriteria:null;if(e&&e.length){let i=this.lastIterator.mergedMetadataArray,s=this.lastIterator.mergedDataArray;for(let r=0;r<s.length;r++)if(this._compareItem(t.data,s[r],e)<0){a=i[r].key,i.splice(r,0,t.metadata),s.splice(r,0,t.data);break}}else a=this.lastIterator.firstBaseKey}const s={add:{data:[t.data],keys:(new e).add(t.metadata.key),metadata:[t.metadata],addBeforeKeys:[a]}},r=new i.DataProviderMutationEvent(s);this.dispatchEvent(r),this._dispatchSubmittableChangeEvent()}removeItem(t){if(this.editBuffer.removeItem(t),this.lastIterator){let e=this.lastIterator.mergedMetadataArray,a=this.lastIterator.mergedDataArray,i=this.lastIterator.mergedAddKeySet;const s=this._findKeyInMetadata(t.metadata.key,e);-1!==s&&(e.splice(s,1),a.splice(s,1),i.delete(t.metadata.key))}const a={remove:{data:t.data?[t.data]:null,keys:(new e).add(t.metadata.key),metadata:[t.metadata]}},s=new i.DataProviderMutationEvent(a);this.dispatchEvent(s),this._dispatchSubmittableChangeEvent()}updateItem(t){this.editBuffer.updateItem(t);const a={update:{data:[t.data],keys:(new e).add(t.metadata.key),metadata:[t.metadata]}},s=new i.DataProviderMutationEvent(a);this.dispatchEvent(s),this._dispatchSubmittableChangeEvent()}getSubmittableItems(){const t=this.editBuffer.getUnsubmittedItems(),e=this.editBuffer.getSubmittingItems();let a=[];return t.forEach((t,i)=>{e.has(i)||a.push(t)}),a}resetAllUnsubmittedItems(){this.editBuffer.getUnsubmittedItems().clear(),this._dispatchSubmittableChangeEvent(),this.dispatchEvent(new i.DataProviderRefreshEvent)}_addEventDetail(t,a,i){null==t[a]&&(t[a]={data:[],keys:new e,metadata:[]}),t[a].keys.add(i.metadata.key),t[a].data.push(i.data),t[a].metadata.push(i.metadata)}resetUnsubmittedItem(t){const s=this.editBuffer.getUnsubmittedItems();let r=new e,n=new a;const d=s.get(t);d&&(r.add(t),n.set(t,d),s.delete(t)),this._dispatchSubmittableChangeEvent(),this.dataProvider.fetchByKeys({keys:r}).then(t=>{let e,a={};n.forEach((i,s)=>{"add"===i.operation?this._addEventDetail(a,"remove",i.item):"remove"===i.operation?(e=t.results.get(s))&&this._addEventDetail(a,"add",e):(e=t.results.get(s))?this._addEventDetail(a,"update",e):this._addEventDetail(a,"remove",i.item)}),this.dispatchEvent(new i.DataProviderMutationEvent(a))})}setItemStatus(t,e,a){t&&(this.editBuffer.setItemStatus(t,e,a),this._dispatchSubmittableChangeEvent())}_dispatchSubmittableChangeEvent(){const t=this.getSubmittableItems();if(t.length!==this.lastSubmittableCount){this.lastSubmittableCount=t.length;const e=new n(t);this.dispatchEvent(e)}}_findKeyInMetadata(e,a){if(a)for(let i=0;i<a.length;i++)if(t.KeyUtils.equals(e,a[i].key))return i;return-1}_initDetailProp(t,e,a,i){t[a]&&(e[a]=i)}_pushDetailProp(t,e,a,i){t[a]&&e[a].push(t[a][i])}_getOperationDetail(t,a){if(t){let i={};const s=this.editBuffer.getSubmittingItems(),r=this.editBuffer.getUnsubmittedItems();if(0!==s.size)return i.keys=new e,this._initDetailProp(t,i,"data",[]),this._initDetailProp(t,i,"metadata",[]),this._initDetailProp(t,i,"addBeforeKeys",[]),this._initDetailProp(t,i,"parentKeys",[]),t.keys.forEach(e=>{if(!s.get(e)&&(i.keys.add(e),t.metadata)){let a=this._findKeyInMetadata(e,t.metadata);a>-1&&(this._pushDetailProp(t,i,"data",a),this._pushDetailProp(t,i,"metadata",a),this._pushDetailProp(t,i,"addBeforeKeys",a),this._pushDetailProp(t,i,"parentKeys",a))}if(a){const t=r.get(e);!t||"remove"!==t.operation&&"update"!==t.operation||r.delete(e)}}),i;this._initDetailProp(t,i,"data",t.data),this._initDetailProp(t,i,"metadata",t.metadata),this._initDetailProp(t,i,"addBeforeKeys",t.addBeforeKeys),this._initDetailProp(t,i,"parentKeys",t.parentKeys)}return t}_handleRefreshEvent(t){let a=this.editBuffer.getUnsubmittedItems(),i=new e;a.forEach(t=>{"remove"!==t.operation&&"update"!==t.operation||i.add(t.item.metadata.key)}),i.size>0?this.dataProvider.fetchByKeys({keys:i}).then(e=>{e.results.forEach((t,e)=>{i.delete(e)}),i.forEach(t=>{a.delete(t)}),this.dispatchEvent(t)}):this.dispatchEvent(t)}_handleMutateEvent(t){let e={add:this._getOperationDetail(t.detail.add,!1),remove:this._getOperationDetail(t.detail.remove,!0),update:this._getOperationDetail(t.detail.update,!1)};this.dispatchEvent(new i.DataProviderMutationEvent(e))}_addEventListeners(t){t[r._ADDEVENTLISTENER](r._REFRESH,this._handleRefreshEvent.bind(this)),t[r._ADDEVENTLISTENER](r._MUTATE,this._handleMutateEvent.bind(this))}}r._REFRESH="refresh",r._MUTATE="mutate",r._ADDEVENTLISTENER="addEventListener",t.BufferingDataProvider=r,t.EventTargetMixin.applyMixin(r);class n extends s{constructor(t){let e={};e.detail=t,super("submittableChange",e)}}
/**
 * @preserve Copyright 2013 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */class d{constructor(){this.unsubmittedItems=new a,this.submittingItems=new a}addItem(e){let a=this.unsubmittedItems.get(e.metadata.key),i=this.submittingItems.get(e.metadata.key);if(a&&("add"===a.operation||"update"===a.operation)||i&&("add"===i.operation||"update"===i.operation))throw new Error("Cannot add item with same key as an item being added or updated");a&&"remove"===a.operation?a.item.data&&t.Object.compareValues(a.item.data,e.data)?this.unsubmittedItems.delete(e.metadata.key):this.unsubmittedItems.set(e.metadata.key,{operation:"update",item:e}):this.unsubmittedItems.set(e.metadata.key,{operation:"add",item:e})}removeItem(t){let e=this.unsubmittedItems.get(t.metadata.key),a=this.submittingItems.get(t.metadata.key);if(e&&"remove"===e.operation||a&&"remove"===a.operation)throw new Error("Cannot remove item with same key as an item being removed");e&&"add"===e.operation?this.unsubmittedItems.delete(t.metadata.key):(e&&e.operation,this.unsubmittedItems.set(t.metadata.key,{operation:"remove",item:t}))}updateItem(t){let e=this.unsubmittedItems.get(t.metadata.key),a=this.submittingItems.get(t.metadata.key);if(e&&"remove"===e.operation||a&&"remove"===a.operation)throw new Error("Cannot update item with same key as an item being removed");!e||"add"!==e.operation&&"update"!==e.operation?this.unsubmittedItems.set(t.metadata.key,{operation:"update",item:t}):this.unsubmittedItems.set(t.metadata.key,{operation:e.operation,item:t})}setItemStatus(t,e,a){const i=t.item.metadata.key;if("submitting"===e)this.unsubmittedItems.delete(i),this.submittingItems.set(i,t);else if("submitted"===e)this.submittingItems.delete(i);else if("unsubmitted"===e){let e;this.submittingItems.delete(i),e=a?{operation:t.operation,item:{data:t.item.data,metadata:{key:t.item.metadata.key,message:a}}}:t,this.unsubmittedItems.set(i,e)}}getUnsubmittedItems(){return this.unsubmittedItems}getSubmittingItems(){return this.submittingItems}isEmpty(){return 0===this.unsubmittedItems.size&&0===this.submittingItems.size}getItem(t){let e=this.unsubmittedItems.get(t);return e||(e=this.submittingItems.get(t)),e}}
/**
 * @preserve Copyright 2013 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */return r});